package com.pungu.store.auth_service.entities;

import com.fasterxml.jackson.annotation.JsonIgnore;
import jakarta.persistence.*;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.Period;
import java.util.Collection;
import java.util.List;

/**
 * Entity class representing a User in the authentication system.
 * Implements UserDetails for Spring Security integration.
 */
@Entity
@Table(name = "users")
@Getter
@Setter
@NoArgsConstructor
public class User implements UserDetails {

    /**
     * Primary key for the User entity.
     * Auto-generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long userId;

    /**
     * Unique username for login.
     */
    @Column(nullable = false, unique = true)
    private String username;

    /**
     * Unique email address of the user.
     */
    @Column(nullable = false, unique = true)
    private String email;

    /**
     * Encrypted password.
     * Marked as @JsonIgnore to prevent exposure in API responses.
     */
    @JsonIgnore
    @Column(nullable = false)
    private String password;

    /**
     * User's first name.
     */
    @Column(nullable = false)
    private String firstName;

    /**
     * User's middle name (optional).
     */
    @Column
    private String middleName;

    /**
     * User's last name.
     */
    @Column(nullable = false)
    private String lastName;

    /**
     * Role of the user (ADMIN, USER, AUTHOR).
     * Stored as a string in the database.
     */
    @Enumerated(EnumType.STRING)
    @Column(nullable = false)
    private Role role;

    /**
     * User's date of birth.
     */
    @Column
    private LocalDate dateOfBirth;

    /**
     * Date and time when the user account was created.
     * Auto-populated by Hibernate.
     */
    @CreationTimestamp
    private LocalDateTime createdAt;

    /**
     * Date and time when the user account was last updated.
     * Auto-updated by Hibernate.
     */
    @UpdateTimestamp
    private LocalDateTime updatedAt;

    /**
     * Transient field to calculate age based on date of birth.
     * Not persisted in the database.
     */
    @Transient
    public int getAge() {
        if (this.dateOfBirth == null) return 0;
        return Period.between(this.dateOfBirth, LocalDate.now()).getYears();
    }

    /**
     * Returns the authorities granted to the user.
     * Based on the role.
     */
    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        return List.of(new SimpleGrantedAuthority(role.name()));
    }

    /**
     * Returns the username used to authenticate the user.
     */
    @Override
    public String getUsername() {
        return this.username;
    }

    /**
     * Account is not expired.
     */
    @Override
    public boolean isAccountNonExpired() {
        return true;
    }

    /**
     * Account is not locked.
     */
    @Override
    public boolean isAccountNonLocked() {
        return true;
    }

    /**
     * Credentials are not expired.
     */
    @Override
    public boolean isCredentialsNonExpired() {
        return true;
    }

    /**
     * Account is enabled.
     */
    @Override
    public boolean isEnabled() {
        return true;
    }
}